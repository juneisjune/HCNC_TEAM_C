<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Popup_EditEmp" width="790" height="420" titletext="직원 정보 수정" background="whitesmoke" onload="Popup_EditEmp_onload">
    <Objects>
      <Dataset id="ds_employee">
        <ColumnInfo>
          <Column id="id" type="STRING" size="256"/>
          <Column id="password" type="STRING" size="256"/>
          <Column id="name" type="STRING" size="256"/>
          <Column id="birth" type="STRING" size="256"/>
          <Column id="gender" type="STRING" size="256"/>
          <Column id="phone" type="STRING" size="256"/>
          <Column id="address" type="STRING" size="256"/>
          <Column id="email" type="STRING" size="256"/>
          <Column id="account" type="STRING" size="256"/>
          <Column id="upd_name" type="STRING" size="256"/>
          <Column id="emp_code" type="STRING" size="256"/>
          <Column id="admin_name" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_gender">
        <ColumnInfo>
          <Column id="value" type="STRING" size="256"/>
          <Column id="text" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="value">남성</Col>
            <Col id="text">남성</Col>
          </Row>
          <Row>
            <Col id="value">여성</Col>
            <Col id="text">여성</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Layouts>
      <Layout width="790" height="420">
        <Static id="Title" text="직원 정보 수정" left="180" top="25" width="420" height="50" background="whitesmoke" cssclass="stc_popup"/>
        <!-- 두 번째 행: ID, 비밀번호 -->
        <Static id="lblPassword" text="새로운 비밀번호" left="380" top="198" width="90" height="30" textAlign="left"/>
        <Edit id="edtPassword" left="490" top="200" width="250" height="30" binddataset="ds_employee" text="bind:password" password="true"/>
        <!-- 세 번째 행: 이름, 생년월일 -->
        <Static id="lblName" text="이름" left="40" top="100" width="80" height="30" textAlign="left"/>
        <Edit id="edtName" left="100" top="100" width="250" height="30" binddataset="ds_employee" text="bind:name"/>
        <Static id="lblBirth" text="생년월일" left="390" top="100" width="80" height="30" textAlign="left" onclick="lblBirth_onclick"/>
        <Calendar id="calBirth" left="490" top="100" width="250" height="30" binddataset="ds_employee" datecolumn="birth" dateformat="yyyy.MM.dd" editformat="yyyy.MM.dd"/>
        <!-- 네 번째 행: 성별, 전화번호 -->
        <Static id="lblGender" text="성별" left="40" top="153" width="80" height="25" textAlign="left"/>
        <Combo id="cmbGender" left="100" top="150" width="250" height="30" innerdataset="ds_gender" codecolumn="value" datacolumn="text" binddataset="ds_employee" value="bind:gender"/>
        <Static id="lblPhone" text="전화번호" left="40" top="203" width="80" height="25" textAlign="left"/>
        <Edit id="edtPhone" left="100" top="200" width="250" height="30" binddataset="ds_employee" text="bind:phone"/>
        <!-- 다섯 번째 행: 주소, 이메일 -->
        <Static id="lblAddress" text="주소" left="390" top="153" width="80" height="25" textAlign="left"/>
        <Edit id="edtAddress" left="490" top="150" width="250" height="30" binddataset="ds_employee" text="bind:address"/>
        <Static id="lblEmail" text="이메일" left="390" top="253" width="80" height="25" textAlign="left"/>
        <Edit id="edtEmail" left="490" top="250" width="250" height="30" binddataset="ds_employee" text="bind:email"/>
        <!-- 여섯 번째 행: 입사일, 퇴사일 -->
        <!-- 일곱 번째 행: 계좌번호, 부서장코드 -->
        <Static id="lblAccount" text="계좌번호" left="40" top="253" width="80" height="25" textAlign="left"/>
        <Edit id="edtAccount" left="100" top="250" width="250" height="30" binddataset="ds_employee" text="bind:account"/>
        <!-- 수정 버튼 -->
        <Button id="btnUpdate" text="수정" left="310" top="360" width="80" height="30" cursor="none" onclick="btnUpdate_onclick" cssclass="btn_edit"/>
        <Button id="btnClose" text="닫기" left="410" top="360" width="80" height="30" onclick="btnClose_onclick" cssclass="btn_delete"/>
      </Layout>
    </Layouts>
    <Bind>
      <BindItem id="item4" compid="edtPassword" propid="value" datasetid="ds_employee" columnid="password"/>
      <BindItem id="item5" compid="edtName" propid="value" datasetid="ds_employee" columnid="name"/>
      <BindItem id="item6" compid="calBirth" propid="value" datasetid="ds_employee" columnid="birth"/>
      <BindItem id="item7" compid="cmbGender" propid="value" datasetid="ds_employee" columnid="gender"/>
      <BindItem id="item8" compid="edtPhone" propid="value" datasetid="ds_employee" columnid="phone"/>
      <BindItem id="item9" compid="edtAddress" propid="value" datasetid="ds_employee" columnid="address"/>
      <BindItem id="item10" compid="edtEmail" propid="value" datasetid="ds_employee" columnid="email"/>
      <BindItem id="item13" compid="edtAccount" propid="value" datasetid="ds_employee" columnid="account"/>
    </Bind>
    <Script type="xscript5.1"><![CDATA[this.Popup_EditEmp_onload = function(obj:nexacro.Form, e:nexacro.LoadEventInfo)
{
	console.log("수정 팝업 열기");

	this.ds_employee.clearData()
	this.ds_employee.addRow();
   
    this.ds_employee.setColumn(0, "id", this.parent.id);
    this.ds_employee.setColumn(0, "password", this.parent.password);
    this.ds_employee.setColumn(0, "name", this.parent.name);
    this.ds_employee.setColumn(0, "birth", this.parent.birth);
    this.ds_employee.setColumn(0, "gender", this.parent.gender);
    this.ds_employee.setColumn(0, "phone", this.parent.phone);
    this.ds_employee.setColumn(0, "email", this.parent.email);
    this.ds_employee.setColumn(0, "address", this.parent.address);
    this.ds_employee.setColumn(0, "account", this.parent.account);
	this.ds_employee.setColumn(0, "emp_code", this.parent.emp_code);
	
	console.log(this.ds_employee.saveXML());

};


// 수정 버튼 클릭 시 호출되는 함수 (수정된 데이터 저장)
this.btnUpdate_onclick = function(obj:nexacro.Button, e:nexacro.ClickEventInfo) {



	if (!this.validateEmployeeData()) {
        return; 
    }
	var loginAdminName = nexacro.getApplication().ds_userInfo.getColumn(0, "name");
	this.ds_employee.setColumn(0,"admin_name",loginAdminName);

    var strSvcId = "updateEmployeeData";  // 서비스 ID
    var strSvcUrl = "svc::updateEmployeeData.do";  // 서버의 URL과 매핑
    var inData = "ds_employee=ds_employee";  // 전송할 데이터셋
    var outData = "";  // 서버에서 받아올 데이터가 없을 경우 빈 문자열
    var strArg = "";  // 추가 인자가 필요 없을 경우 빈 문자열
    var callBackFnc = "fnCallback";  // 콜백 함수 호출
    var isAsync = true;  // 비동기 처리

    console.log(this.ds_employee.saveXML());

    // transaction 호출
    this.transaction(strSvcId, strSvcUrl, inData, outData, strArg, callBackFnc, isAsync);
	
    alert("수정 완료");
    this.close("수정 완료");
	
	this.opener.fnSearch();
};

	// 유효성 검사 함수
this.validateEmployeeData = function() {
    var name = this.ds_employee.getColumn(0, "name");
    var birth = this.ds_employee.getColumn(0, "birth");
    var gender = this.ds_employee.getColumn(0, "gender");
    var phone = this.ds_employee.getColumn(0, "phone");
    var address = this.ds_employee.getColumn(0, "address");
    var account = this.ds_employee.getColumn(0, "account");
    var email = this.ds_employee.getColumn(0, "email");
    var password = this.ds_employee.getColumn(0, "password");



    // 이름 검사
    if (!name || name.trim() === "") {
        alert("이름을 입력해 주세요.");
        return false;  
    }

    // 생년월일 검사 (YYYYMMDD 형식)
	var birth = this.ds_employee.getColumn(0, "birth");
	if (birth) {
    birth = birth.toString().trim();  

    }

    // 성별 검사
    if (!gender || gender.trim() === "") {
        alert("성별을 입력해 주세요.");
        return false;
    }

     // 전화번호 검사 (010-XXXX-XXXX 형식)
    var phonePattern = /^010-[0-9]{4}-[0-9]{4}$/; 
    if (!phone || !phonePattern.test(phone)) {
        alert("유효한 전화번호를 입력해 주세요. 형식: 010-XXXX-XXXX");
        return false;
    }

    // 주소 검사
    if (!address || address.trim() === "") {
        alert("주소를 입력해 주세요.");
        return false;  
    }

    // 이메일 검사 (간단한 이메일 형식 검사)
    var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;  
    if (!email || !emailPattern.test(email)) {
        alert("유효한 이메일을 입력해 주세요.");
        return false;  
    }
   
     var accountPattern = /^[가-힣]+[0-9]+$/;  
    if (!account || !accountPattern.test(account)) {
        alert("유효한 계좌번호를 입력해 주세요. 예: 국민은행12345678");
        return false;  
    }
	
	 // 비밀번호 검사 (비밀번호가 입력된 경우에만 검사)
    if (password && password.trim() !== "") {
        // 비밀번호 형식 검사 예시 (최소 8자, 하나 이상의 숫자, 하나 이상의 영문자 포함)
        var passwordPattern = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/;
        if (!passwordPattern.test(password)) {
            alert("비밀번호는 최소 8자 이상이며, 숫자와 영문자를 포함해야 합니다.");
            return false;
        }
    }

    // 모든 유효성 검사를 통과하면 true 반환
    return true;
};


this.btnClose_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.close("닫기");
	this.ds_employee.clearData()
	console.log("수정 화면 닫음");
	this.opener.fnSearch();
};
]]></Script>
  </Form>
</FDL>
