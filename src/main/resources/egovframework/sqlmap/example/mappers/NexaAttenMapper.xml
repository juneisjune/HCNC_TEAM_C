<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hcnc.cteam.attendance.NexaAttenMapper">
	
	<!-- 조건에 따른 근태 목록 조회(검색) 쿼리 -->
	<select id="nexaGetAttenListByCondition"
		resultType="nexaAttenDTO">
		SELECT a.emp_code as empCode
			, a.name as name
			, d.assign_name as assignName
			, e.dep_name as depName
			, b.work_date as workDate
			, c.atten_type as attenType
			, DATE_FORMAT(b.work_start, '%H:%i') as workStart
			, DATE_FORMAT(b.work_end, '%H:%i') as workEnd
			, b.work_over as workOver
		FROM employee a
		JOIN attendance b ON a.emp_code = b.emp_code
		JOIN att_code c ON b.atten_code = c.atten_code
		JOIN assignment d ON a.assign_code = d.assign_code
		JOIN department e ON a.dep_code = e.dep_code
		WHERE 1=1
		<if test="SEARCH_WORD != null and SEARCH_WORD != '' and SEARCH_TYPE != '' and SEARCH_TYPE != null">
			<!-- 전체 조회 -->
			<if test="SEARCH_TYPE == 'ALL'">
				AND (a.emp_code LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR a.name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR d.assign_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR e.dep_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR b.work_date LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR c.atten_type LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR b.work_start LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR b.work_end LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR b.work_over LIKE CONCAT('%', #{SEARCH_WORD}, '%'))
			</if>
			<!-- 이름별 조회 -->
			<if test="SEARCH_TYPE == 'NAME'">
				AND a.name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<!-- 직책별 조회 -->			
			<if test="SEARCH_TYPE == 'ASSIGNMENT'">
				AND d.assign_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<!-- 부서별 조회 -->
			<if test="SEARCH_TYPE == 'DEPARTMENT'">
				AND dep_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<!-- 근무형태별 조회 -->
			<if test="SEARCH_TYPE == 'WORK_TYPE'">
				AND c.atten_type LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
		</if>
		<!-- 근무일자에 따른 조회 -->
		<if test='START_DATE != null and START_DATE != "" and END_DATE != null and END_DATE != ""'>
			AND b.work_date BETWEEN #{START_DATE} AND #{END_DATE}
		</if>
		ORDER BY b.work_date DESC
	</select>

	<!-- 근태 정보 수정 -->
	<update id="editAttenList" parameterType="nexaAttenDTO">
		UPDATE attendance 
		SET <if test="attenType == '출근'">
				atten_code = 1
				, work_start = CASE 
		        WHEN LENGTH(#{workStart}) = 4 THEN 
		            CONCAT(SUBSTRING(#{workStart}, 1, 2), ":", SUBSTRING(#{workStart}, 3, 2), ':00')
		        WHEN LENGTH(#{workStart}) = 5 THEN 
		            #{workStart}
		        ELSE null
			    END
			    , work_end = CASE 
			        WHEN LENGTH(#{workEnd}) = 4 THEN 
			            CONCAT(SUBSTRING(#{workEnd}, 1, 2), ":", SUBSTRING(#{workEnd}, 3, 2), ':00')
			        WHEN LENGTH(#{workEnd}) = 5 THEN 
			            #{workEnd}
			        ELSE null
			    END
				, work_over = (
				FLOOR(
						TIME_TO_SEC(
							CASE 
								WHEN 0 > TIMEDIFF(work_end, '18:00:00') THEN 0
								WHEN work_end > '21:00:00' THEN TIMEDIFF('21:00:00', '18:00:00')
								ELSE TIMEDIFF(work_end, '18:00:00')
							END
						) / 1800
					) * 0.5
				)
			</if>
			<if test="attenType == '결근'">
				atten_code = 2
				, work_start = null
				, work_end = null
				, work_over = null
			</if>
			<if test="attenType == '휴가'">
				atten_code = 3
				, work_start = null
				, work_end = null
				, work_over = null
			</if>
		   		, upd_date = CURTIME()
		   		, upd_name = #{admin_name}
			WHERE 1=1
				AND emp_code = #{empCode}
				AND work_date = SUBSTRING(#{workDate}, 1, 8)
	</update>
	
	<!-- 근태 등록을 위한 직원 정보 조회 -->
	<select id="nexaGetEmpListByCondition"
		resultType="nexaAttenDTO">
		SELECT a.emp_code as empCode
			, a.name as name
			, b.assign_name as assignName
			, c.dep_name as depName
			, a.birth as birth
			, a.gender as gender
		FROM employee a
		JOIN assignment b ON a.assign_code = b.assign_code
		JOIN department c ON a.dep_code = c.dep_code
		WHERE 1=1
		<if test="SEARCH_WORD != null and SEARCH_WORD != '' and SEARCH_TYPE != '' and SEARCH_TYPE != null">
			<!-- 전체 조회 -->
			<if test="SEARCH_TYPE == 'ALL'">
				AND a.name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR b.assign_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR c.dep_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR a.birth LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				OR a.gender LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<!-- 이름별 조회 -->
			<if test="SEARCH_TYPE == 'NAME'">
				AND a.name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<!-- 직책별 조회 -->			
			<if test="SEARCH_TYPE == 'ASSIGNMENT'">
				AND b.assign_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<!-- 부서별 조회 -->
			<if test="SEARCH_TYPE == 'DEPARTMENT'">
				AND c.dep_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
		</if>
	</select>
	
	<!-- 근태 정보 등록 -->
	<insert id="attenRegister" parameterType="nexaAttenDTO">
		INSERT INTO attendance 
			(
			emp_code
			, work_date
			, atten_code
			, work_start
			, work_end
			, work_over
			, reg_date
			, reg_name
			)
			VALUES
			(
			#{empCode}
			, #{workDate}
			<if test="attenType == '출근'">
			, 1
			, CONCAT(SUBSTRING(#{workStart}, 1, 2), ":", SUBSTRING(#{workStart}, 3, 2), ':00')
			, CONCAT(SUBSTRING(#{workEnd}, 1, 2), ":", SUBSTRING(#{workEnd}, 3, 2), ':00')
			</if>
			<if test="attenType == '결근'">
			, 2
			, null
			, null
			</if>
			<if test="attenType == '휴가'">
			, 3
			, null
			, null
			</if>
			, FLOOR(
		            TIME_TO_SEC(
		                CASE 
		                    WHEN 0 > TIMEDIFF(work_end, '18:00:00') THEN 0
		                    WHEN work_end > '21:00:00' THEN TIMEDIFF('21:00:00', '18:00:00')
		                    ELSE TIMEDIFF(work_end, '18:00:00')
		                END
		            ) / 1800
		        ) * 0.5
			, CURTIME()
			, #{admin_name}
			)
		</insert>
		
		<!-- 이미 근태 정보가 등록된 날짜인지 체크 -->
		<select id="attenRegisterCheck" parameterType="map" resultType="int">
			SELECT COUNT(emp_code)
			FROM attendance
			WHERE 1=1
				AND emp_code = #{empCode}
				AND work_date = #{workDate}
		</select>
		
		<!-- 사번 입력 시 해당 직원 정보 가져오기 -->
		<select id="selectUserInfo" parameterType="map" resultType="map">
			SELECT a.emp_code as empCode
				, a.name as name
				, b.assign_name as assignName
				, c.dep_name as depName
			FROM employee a
			JOIN assignment b ON a.assign_code = b.assign_code
			JOIN department c ON a.dep_code = c.dep_code
			WHERE 1=1
				AND a.emp_code = #{empCode}
		</select>
</mapper>