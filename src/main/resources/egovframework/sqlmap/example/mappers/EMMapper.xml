<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
            직원 목록을 조회하는 SQL 쿼리입니다. 이 쿼리는 검색 조건에 따라 다르게 작동합니다.
            검색 조건은 검색어(SEARCH_WORD)와 검색 유형(SEARCH_TYPE)을 사용합니다.
            검색 유형에는 이름(NAME), 부서(DEP), 직책(ASSIGN) 등이 포함될 수 있습니다.
        -->
<mapper namespace="hcnc.cteam.employee.EMMapper">

	<select id="selectEmployeeList" parameterType="map"
		resultType="map">
		SELECT
			a.emp_code AS empCode,
			b.dep_name AS depName,  
			c.assign_name AS assignName,  
			a.id,  
			a.name, 
			TO_CHAR(a.birth, 'YYYYMMDD') AS birth,
			a.gender,  
			a.phone,  
			a.address, 
			a.email,  
			a.account 
		FROM employee a 
			LEFT JOIN department b ON a.dep_code = b.dep_code  
			LEFT JOIN assignment c ON a.assign_code = c.assign_code 
		WHERE 1=1  
		
		<if test="SEARCH_TYPE != null and SEARCH_WORD != null">
			<if test="SEARCH_TYPE == 'NAME'">
				AND a.name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<if test="SEARCH_TYPE == 'DEP'">
				AND b.dep_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<if test="SEARCH_TYPE == 'ASSIGN'">
				AND c.assign_name LIKE CONCAT('%', #{SEARCH_WORD}, '%')
			</if>
			<if test="SEARCH_TYPE == 'ALL'">
				AND (
				 a.id LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                a.name LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                b.dep_name LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                c.assign_name LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                a.birth LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                a.gender LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                a.phone LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                a.address LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                a.email LIKE CONCAT('%', #{SEARCH_WORD}, '%') OR
                a.account LIKE CONCAT('%', #{SEARCH_WORD}, '%')
				)
			</if>
		</if>
	</select>

	<!--
            직원 정보를 데이터베이스에 등록하는 SQL 쿼리입니다.
            직원의 ID, 이름, 비밀번호, 생년월일, 성별, 전화번호, 주소, 이메일, 입사일, 계좌정보 등을 입력합니다.
            비밀번호는 SHA-256 해시 함수로 암호화됩니다.
        -->
	<insert id="insertEmployeeData" parameterType="map">
	
		INSERT INTO employee (
			id, name, password, birth, gender, phone, address,
			email, join_date, account, reg_date, reg_name
			)
		VALUES (
			#{id},  
			#{name},
			SHA2(#{password}, 256), 
			#{birth}, 
			#{gender},  
			#{phone}, 
			#{address},  
			#{email}, 
			#{joinDate},  
			#{account}, 
			CURTIME(),  
			#{admin_name}  
			);
	</insert>
		<!--
            기존 직원 정보를 수정하는 SQL 쿼리입니다.
            사번(emp_code)에 해당하는 직원 정보를 수정하며, 수정 가능한 필드로는
            이름, 비밀번호, 생년월일, 성별, 전화번호, 주소, 이메일, 계좌정보 등이 포함됩니다.
        -->

	<update id="updateEmployeeData" parameterType="map">

		 UPDATE employee
           SET
        id = #{id},
        <if test="password != null and password != ''">
            password = SHA2(#{password}, 256),
       </if>
	        name = #{name},
	        birth = SUBSTRING(#{birth}, 1, 8), 
	        gender = #{gender},  
	        phone = #{phone},  
	        address = #{address}, 
	        email = #{email},  
	        account = #{account}
	    WHERE emp_code = #{emp_code};   
	</update>

	
	<delete id="deleteEmployee" parameterType="map">
		<!--
            특정 직원 정보를 삭제하는 SQL 쿼리입니다.
            사번(emp_code)을 이용해 해당 직원의 데이터를 데이터베이스에서 삭제합니다.
        -->
		DELETE FROM employee
		WHERE emp_code = #{empCode}; 
	</delete>

	<delete id="deleteDayoffCount" parameterType="map">
		DELETE FROM dayoff_count
		WHERE emp_code = #{empCode};
	</delete>
		
	<!--직원 ID의 중복 여부를 확인하는 SQL 쿼리입니다.
           직원 테이블에서 해당 ID가 존재하는지 확인하여 중복인 경우 1 이상의 숫자를 반환합니다. -->
	<select id="countEmployeeById" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM employee
		WHERE id = #{id};  
	</select>
</mapper>
